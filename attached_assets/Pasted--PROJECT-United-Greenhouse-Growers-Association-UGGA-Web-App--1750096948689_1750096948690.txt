üåø  PROJECT   United Greenhouse Growers Association (UGGA) Web App
===============================================================

1. PURPOSE & MVP SCOPE
----------------------
Goal ‚ñ∏ Public-facing site + gated member portal that surfaces AI tools and a ‚ÄúFind-a-Grower‚Äù network.
MVP ‚ñ∏ Everything listed here; fancy styling, payments, and mobile app are out-of-scope for now.

2. TECH STACK
-------------
‚Ä¢ Framework        Next.js 14 ‚ÄúApp Router‚Äù (TypeScript)  
‚Ä¢ UI               TailwindCSS + Headless UI  
‚Ä¢ DB               Replit Postgres ‚Üí Prisma ORM (schema.prisma + migrations)  
‚Ä¢ Auth             Replit Auth OR NextAuth + bcrypt ‚Üí JWT cookie (httpOnly, SameSite=Lax)  
‚Ä¢ Email            SendGrid (transactional emails)  
‚Ä¢ AI               OpenAI Chat Completions v1 (Assistants API coming later)  
‚Ä¢ DevOps           Replit Autoscale deploy + GitHub backup

3. PUBLIC ROUTES
----------------
/                   ‚Äì Home (hero, mission, CTA)
/about              ‚Äì Org history & board bios
/contact            ‚Äì Form ‚Üí POST /api/contact ‚Üí SendGrid
/blog               ‚Äì Blog index (MDX files in /content/posts)
/blog/[slug]        ‚Äì Blog article
/resources          ‚Äì Curated docs (static for MVP)

4. AUTH & USER FLOWS
--------------------
/register  ‚ñ∏ Form (name, phone, state, employer, job_title, farm_type, email, username, pw)  
            ‚îî POST /api/auth/register  
               ‚Ä¢ hash pw  ‚Ä¢ create user + profile ‚Ä¢ email ‚Äúverify‚Äù link  
/verify    ‚ñ∏ On click ‚Üí marks email_verified = true  
/login     ‚ñ∏ POST /api/auth/login ‚Üí set JWT cookie  
/logout    ‚ñ∏ POST /api/auth/logout ‚Üí clear cookie  
/reset-pw  ‚ñ∏ Email flow (token TTL 30 min) ‚Äì **nice-to-have**

Roles: `guest`, `member`, `admin` (simple ENUM column).  
Middleware `/lib/auth.ts` redirects non-members off `/dashboard/*`.

5. MEMBER PORTAL (protected)
----------------------------
/dashboard                  ‚Äì Welcome card + profile snippet  
/dashboard/profile          ‚Äì Edit profile (PUT /api/profile)  
/dashboard/find-a-grower    ‚Äì GPT chat widget  
                              ‚Ä¢ POST /api/ai/find-grower  
                              ‚Ä¢ System prompt: ‚ÄúGiven question + member directory, suggest growers‚Ä¶‚Äù  
/dashboard/assessment       ‚Äì AI Farm Assessment tool (multi-turn)  
                              ‚Ä¢ Streamed responses with Server-Sent Events  
/dashboard/resources        ‚Äì Same as public resources but filtered by member.state & farm_type  

ADMIN EXTRAS (role = admin)
---------------------------
/admin/resources            ‚Äì CRUD resources  
/admin/blog                 ‚Äì CRUD blog posts  
/admin/members              ‚Äì View/search member directory

6. DATABASE MODEL  (Prisma syntax)
----------------------------------
model User {
  id            String   @id @default(uuid())
  username      String   @unique
  email         String   @unique
  emailVerified DateTime?
  passwordHash  String
  role          Role     @default(MEMBER)
  createdAt     DateTime @default(now())
  profile       Profile?
  chatLogs      ChatLog[]
}

model Profile {
  userId   String   @id
  user     User     @relation(fields: [userId], references: [id])
  name     String
  phone    String
  state    String
  employer String?
  jobTitle String?
  farmType String?
}

model BlogPost {
  id          String   @id @default(uuid())
  title       String
  slug        String   @unique
  contentMd   String
  publishedAt DateTime @default(now())
}

model Resource {
  id    String   @id @default(uuid())
  title String
  url   String
  tags  String[]
}

model ChatLog {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  type      String   // FIND_GROWER | ASSESSMENT
  prompt    String
  response  Json
  createdAt DateTime @default(now())
}

enum Role {
  GUEST
  MEMBER
  ADMIN
}

Indexes ‚ñ∏ `Profile(state, farmType)` to speed up grower lookup.

7. API CONTRACT
---------------
GET   /api/blog                     ‚Äì list posts
GET   /api/blog/[slug]              ‚Äì single post
POST  /api/contact                  ‚Äì {name,email,message}
POST  /api/auth/register            ‚Äì registration
POST  /api/auth/login               ‚Äì login
GET   /api/auth/me                  ‚Äì current user
POST  /api/ai/find-grower           ‚Äì {question:string}
POST  /api/ai/assessment            ‚Äì {input:string, sessionId?}
PUT   /api/profile                  ‚Äì update profile
*Admin*
POST  /api/admin/resources          ‚Äì CRUD
POST  /api/admin/blog               ‚Äì CRUD

8. ENV VARS
-----------
DATABASE_URL
JWT_SECRET
SENDGRID_API_KEY
OPENAI_API_KEY
FROM_EMAIL          = info@greenhousegrowers.org
DOMAIN_URL          = https://www.greenhousegrowers.org

9. SECURITY & COMPLIANCE
------------------------
‚Ä¢ Rate-limit AI endpoints (express-rate-limit)  
‚Ä¢ Password policy: min 12 chars  
‚Ä¢ CSRF middleware for POST routes  
‚Ä¢ Store only public profile data in AI prompts (no phone/email unless opted in)  
‚Ä¢ Daily DB snapshot (Replit auto + pg_dump cron)

10. DEPLOYMENT STEPS
--------------------
1. Replit ‚ñ∏ Create Next.js template ‚Üí add Postgres integration  
2. Push to GitHub (Replit VC)  
3. Deploy ‚ÄúAutoscale‚Äù ‚Üí obtain *.repl.co URL  
4. Link custom domain `www.greenhousegrowers.org` (CNAME)  
5. Verify SSL ‚Üí green lock  
6. Create staging branch + separate deployment for QA

11. TEST & QUALITY
------------------
‚Ä¢ Unit: vitest for API utilities  
‚Ä¢ Integration: supertest for API routes  
‚Ä¢ E2E: Playwright (register ‚Üí dashboard ‚Üí AI chat)  
‚Ä¢ GitHub ‚Üí CI workflow triggers on PR

12. ROADMAP AFTER MVP
---------------------
‚Ä¢ Payment gateway (Stripe) for paid membership tiers  
‚Ä¢ Fine-tuned OpenAI Assistants with vector store of greenhouse best practices  
‚Ä¢ Mobile-first redesign  
‚Ä¢ Multi-tenant support for partner associations

===============================================================
‚úÖ  Please scaffold these pages, API routes, Prisma models, and a basic Tailwind layout so I can iterate in the Replit IDE.  Thank you!
