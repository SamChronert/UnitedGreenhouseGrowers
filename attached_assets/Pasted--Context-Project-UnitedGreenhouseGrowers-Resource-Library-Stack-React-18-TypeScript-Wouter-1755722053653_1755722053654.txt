[Context]
- Project: UnitedGreenhouseGrowers Resource Library
- Stack: React 18 + TypeScript, Wouter routing, TanStack Query, Express API
- Issue: Multiple toggles across tabs are broken due to fragile URL query string handling
- Root cause: Ad-hoc query parsing with Wouter doesn't properly sync with URL state

[Goal]
Create a robust, centralized query parameter handler that all tabs can use reliably for toggle states.

[Actions for Replit Agent]
1. Create new file `client/src/hooks/useQueryParams.ts` with TypeScript:
   ```typescript
   import { useLocation, useNavigate } from 'wouter';
   
   export function useQueryParams() {
     const [location] = useLocation();
     const navigate = useNavigate();
     
     // Parse current URL params using URLSearchParams
     const getParams = () => {
       const url = new URL(window.location.href);
       return new URLSearchParams(url.search);
     };
     
     // Get a specific param value
     const getParam = (key: string): string | null => {
       return getParams().get(key);
     };
     
     // Set a param and navigate
     const setParam = (key: string, value: string) => {
       const params = getParams();
       params.set(key, value);
       navigate(`${window.location.pathname}?${params.toString()}`);
     };
     
     // Remove a param
     const removeParam = (key: string) => {
       const params = getParams();
       params.delete(key);
       navigate(`${window.location.pathname}?${params.toString()}`);
     };
     
     // Set multiple params at once
     const setParams = (updates: Record<string, string>) => {
       const params = getParams();
       Object.entries(updates).forEach(([key, value]) => {
         params.set(key, value);
       });
       navigate(`${window.location.pathname}?${params.toString()}`);
     };
     
     return { getParam, setParam, removeParam, setParams, getParams };
   }
   ```

2. Create a companion hook for syncing with React state:
   ```typescript
   export function useParamState(key: string, defaultValue: string) {
     const { getParam, setParam } = useQueryParams();
     const current = getParam(key) || defaultValue;
     
     const setValue = (value: string) => {
       setParam(key, value);
     };
     
     return [current, setValue] as const;
   }
   ```

3. Add JSDoc comments explaining usage
4. Export from a barrel file if one exists (`client/src/hooks/index.ts`)

[Checks & Tests]
- Import the hook in a test component
- Verify getParam correctly reads from URL
- Test setParam updates both URL and triggers navigation
- Confirm browser back/forward works with param changes
- Test that multiple tabs can use the hook simultaneously without conflicts

[Stop Condition]
PASS: Query params reliably read/write from URL; no more ad-hoc parsing needed
FAIL: If Wouter navigation doesn't update URL, check navigate usage. If params lost, verify URLSearchParams parsing.